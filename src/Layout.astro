---
import "swiper/css";
import "@styles/styles.scss";
import type { TemplateConfig } from "utils/configType";
import {
  generateMobileApplicationSchema,
  generateOrganizationSchema,
  generateWebSiteSchema,
} from "utils/structuredData";

const config = Astro.props as TemplateConfig;
const { backgroundGrid, seo, logo, theme, forceTheme } = config;

// Generate structured data schemas
const mobileAppSchema = generateMobileApplicationSchema(config, Astro.url.href);
const organizationSchema = generateOrganizationSchema(config, Astro.url.href);
const websiteSchema = generateWebSiteSchema(config, Astro.url.href);
---

<!doctype html>
<html lang="en" data-theme={theme}>
  <head>
    <!-- Global Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/webp" href="/favicon.webp" />
    <meta name="generator" content={Astro.generator} />

    <!-- Preload Critical Fonts -->
    <link rel="preload" href="/fonts/Geist-Variable.woff2" as="font" type="font/woff2" crossorigin />
    <link rel="preload" href="/fonts/montserrat-latin-500-normal.woff2" as="font" type="font/woff2" crossorigin />

    <!-- Resource Hints -->
    <link rel="dns-prefetch" href="https://fabapps.dev" />
    <link rel="dns-prefetch" href="https://tools.google.com" />
    <link rel="dns-prefetch" href="https://policies.google.com" />
    <link rel="dns-prefetch" href="https://www.google.com" />

    <!-- Primary Meta Tags -->
    <title>{seo.title}</title>
    <meta name="title" content={seo.title} />
    <meta name="description" content={seo.description} />
    <meta name="robots" content="index, follow" />
    <link rel="canonical" href={Astro.url} />

    <!-- Hreflang Tags for Multilingual SEO -->
    <link rel="alternate" hreflang="en" href={Astro.url} />
    <link rel="alternate" hreflang="es" href={Astro.url} />
    <link rel="alternate" hreflang="tl" href={Astro.url} />
    <link rel="alternate" hreflang="vi" href={Astro.url} />
    <link rel="alternate" hreflang="zh-CN" href={Astro.url} />
    <link rel="alternate" hreflang="x-default" href={Astro.url} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={seo.title} />
    <meta property="og:description" content={seo.description} />
    <meta property="og:image" content={new URL(logo, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={seo.title} />
    <meta property="twitter:description" content={seo.description} />
    <meta property="twitter:image" content={new URL(logo, Astro.url)} />

    <!-- Structured Data (JSON-LD) for SEO -->
    <script type="application/ld+json" set:html={JSON.stringify(mobileAppSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(organizationSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />

    <!-- Allow pages to inject additional head content (e.g., FAQPage schema) -->
    <slot name="head" />

    <script is:inline>
      // Set language attribute dynamically (same detection order as i18next)
      function getLanguage() {
        const supportedLngs = ['en', 'es', 'tl', 'vi', 'zh-CN'];
        // Check localStorage first (i18next stores in 'i18nextLng')
        const storedLng = localStorage.getItem('i18nextLng');
        if (storedLng && supportedLngs.includes(storedLng)) {
          return storedLng;
        }
        // Fall back to navigator language
        const navLng = navigator.language || navigator.userLanguage;
        if (navLng) {
          // Exact match
          if (supportedLngs.includes(navLng)) return navLng;
          // Try base language (e.g., en-US -> en)
          const baseLng = navLng.split('-')[0];
          if (supportedLngs.includes(baseLng)) return baseLng;
        }
        // Default to English
        return 'en';
      }
      const lang = getLanguage();
      document.documentElement.setAttribute('lang', lang);
    </script>

    <script is:inline define:vars={{ forceTheme }}>
      function getPreferredColorScheme() {
        if (!window.matchMedia) {
          return;
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
      }
      const theme = localStorage.getItem("theme") ?? getPreferredColorScheme();
      if (theme === "dark" && !forceTheme)
        document.documentElement.setAttribute("data-theme", theme);
    </script>
  </head>
  <body class="relative">
    {backgroundGrid && <div class="backgroundGrid" />}
    <slot />
  </body>
</html>
