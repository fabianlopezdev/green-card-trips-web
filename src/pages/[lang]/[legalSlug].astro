---
import Layout from "@layouts/Layout.astro";
import defaultTemplateConfig from "@utils/config";
import { getTranslations, getSupportedLanguages, legalPageSlugs, type LegalPageKey } from "@utils/serverI18n";
import { generateBreadcrumbSchema } from "@utils/structuredData";
import Navbar from "@components/navbar/index.astro";
import AppBanner from "@components/appBanner/index.astro";
import Footer from "@components/footer/index.astro";
import PrivacyPolicyContent from "@modules/privacyPolicy/index.astro";
import TermsAndConditionsContent from "@modules/termsAndConditions/index.astro";
import CookiesPolicyContent from "@modules/cookiesPolicy/index.astro";
import { getLegalEntry } from "@modules/legal/getLegalEntry";

export function getStaticPaths() {
  const languages = getSupportedLanguages();
  const paths: any[] = [];

  // Exclude 'en' since English is at root level (/)
  const nonEnglishLangs = languages.filter(lang => lang !== 'en');

  // Generate paths for each legal page in each non-English language
  nonEnglishLangs.forEach(lang => {
    Object.entries(legalPageSlugs).forEach(([pageKey, slugs]) => {
      const slug = slugs[lang as keyof typeof slugs];
      paths.push({
        params: { lang, legalSlug: slug },
        props: {
          lang,
          pageKey: pageKey as LegalPageKey,
          translations: getTranslations(lang),
        }
      });
    });
  });

  return paths;
}

const { lang, legalSlug } = Astro.params;
const { pageKey, translations } = Astro.props;

const legalEntry = await getLegalEntry(pageKey, lang);
const seo = legalEntry.data.seo;

// Generate language-specific legal page URLs
const legalUrls = {
  termsAndConditions: `/${lang}/${legalPageSlugs['terms-and-conditions'][lang as keyof typeof legalPageSlugs['terms-and-conditions']]}`,
  privacyPolicy: `/${lang}/${legalPageSlugs['privacy-policy'][lang as keyof typeof legalPageSlugs['privacy-policy']]}`,
  cookiesPolicy: `/${lang}/${legalPageSlugs['cookies-policy'][lang as keyof typeof legalPageSlugs['cookies-policy']]}`,
};

// Generate site URL for breadcrumbs
const siteUrl = Astro.site || new URL(Astro.url.origin);

const pageTitle = legalEntry.data.title || seo?.title || "";

// Generate breadcrumb schema with language-specific URLs
const breadcrumbs = [
  { name: translations?.navbar?.home || "Home", url: new URL(`/${lang}`, siteUrl).href },
  { name: pageTitle, url: new URL(`/${lang}/${legalSlug}`, siteUrl).href }
];
const breadcrumbSchema = generateBreadcrumbSchema(breadcrumbs);
---

<Layout
  {...defaultTemplateConfig}
  seo={seo}
  currentLang={lang}
  translations={translations}
>
  <!-- BreadcrumbList Structured Data -->
  <script is:inline type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} slot="head" />

  
  <main id="main">
    <Navbar config={defaultTemplateConfig} translations={translations} currentLang={lang} />
    {pageKey === 'privacy-policy' && (
      <PrivacyPolicyContent currentLang={lang} />
    )}
    {pageKey === 'terms-and-conditions' && (
      <TermsAndConditionsContent currentLang={lang} />
    )}
    {pageKey === 'cookies-policy' && (
      <CookiesPolicyContent currentLang={lang} />
    )}
    <AppBanner config={defaultTemplateConfig} translations={translations} currentLang={lang} />
    <Footer config={defaultTemplateConfig} translations={translations} currentLang={lang} legalUrls={legalUrls} />
  </main>
</Layout>
