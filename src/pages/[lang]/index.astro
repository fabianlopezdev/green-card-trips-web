---
import BaseLayout from "@layouts/BaseLayout.astro";
import defaultTemplateConfig from "@utils/config";
import { generateFAQPageSchema, generateReviewSchema, generateProductSchema } from "@utils/structuredData";
import { getTranslations, getSupportedLanguages } from "@utils/serverI18n";
import Header from "@modules/home/_components/header/index.astro";
import Partners from "@modules/home/_components/partners/partners.astro";
import Features from "@modules/home/_components/features/features.astro";
import HowItWorks from "@modules/home/_components/howItWorks/howItWorks.astro";
import Pricing from "@modules/home/_components/pricing/pricing.astro";
import Testimonials from "@modules/home/_components/testimonials/index.astro";
import Faq from "@modules/home/_components/faq/faq.astro";
import AppBanner from "@components/appBanner/index.astro";

export function getStaticPaths() {
  const languages = getSupportedLanguages();

  // Exclude 'en' since English is at root level (/)
  return languages
    .filter(lang => lang !== 'en')
    .map(lang => ({
      params: { lang },
      props: {
        lang,
        translations: getTranslations(lang),
      }
    }));
}

const { lang } = Astro.params;
const { translations } = Astro.props;

// Generate FAQPage schema with language-specific FAQ content
const faqs = [
  { question: translations.faq.q1.question, answer: translations.faq.q1.answer },
  { question: translations.faq.q2.question, answer: translations.faq.q2.answer },
  { question: translations.faq.q3.question, answer: translations.faq.q3.answer },
  { question: translations.faq.q4.question, answer: translations.faq.q4.answer },
  { question: translations.faq.q5.question, answer: translations.faq.q5.answer },
];
const faqSchema = generateFAQPageSchema(faqs);

// Generate Review schemas for testimonials
const reviewSchemas = generateReviewSchema(defaultTemplateConfig);

// Generate Product schema for pricing with production URL
const siteUrl = Astro.site || new URL(Astro.url.origin);
const currentPageUrl = new URL(Astro.url.pathname, siteUrl).href;
const productSchema = generateProductSchema(defaultTemplateConfig, currentPageUrl);
---

<BaseLayout {...defaultTemplateConfig} currentLang={lang} translations={translations}>
  <!-- FAQPage Structured Data -->
  <script is:inline type="application/ld+json" set:html={JSON.stringify(faqSchema)} slot="head" />

  <!-- Review Structured Data for Testimonials -->
  {reviewSchemas.map((review) => (
    <script is:inline type="application/ld+json" set:html={JSON.stringify(review)} slot="head" />
  ))}

  <!-- Product Structured Data -->
  <script is:inline type="application/ld+json" set:html={JSON.stringify(productSchema)} slot="head" />

  <Header config={defaultTemplateConfig} translations={translations} currentLang={lang} />
  <Partners config={defaultTemplateConfig} translations={translations} currentLang={lang} />
  <Features config={defaultTemplateConfig} translations={translations} currentLang={lang} />
  <HowItWorks config={defaultTemplateConfig} translations={translations} currentLang={lang} />
  <Pricing config={defaultTemplateConfig} translations={translations} currentLang={lang} />
  <Testimonials config={defaultTemplateConfig} />
  <Faq config={defaultTemplateConfig} translations={translations} currentLang={lang} />
  <AppBanner config={defaultTemplateConfig} translations={translations} currentLang={lang} />
</BaseLayout>
